import { Injectable, isDevMode } from '@angular/core';
import * as i0 from "@angular/core";
export class ScrollTopService {
    constructor() {
        this.isDevMode = isDevMode();
        this.isWindow = typeof window !== 'undefined';
        this._init = false;
        this.lastY = 0;
        this.ticking = false;
        this.log = (s, ...optional) => s && this.isDevMode && console.log(s, optional);
        this.handleScroll = () => {
            if (!this.ticking) {
                window.requestAnimationFrame(() => {
                    this.updateLastY();
                    this.ticking = false;
                });
                this.ticking = true;
            }
        };
    }
    get currentPositionY() {
        return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
    }
    get info() { return Math.ceil(this.lastY); }
    setDevMode() { this.isDevMode = true; }
    init(elementId) {
        if (this.isWindow) {
            this.destroy();
            this._elementToScroll = null;
            if (elementId) {
                this._elementToScroll = document.querySelector(`#${elementId}`);
            }
            this._host = this._elementToScroll || window;
            this._host.addEventListener('scroll', this.handleScroll);
            this.log(`'NgScrolltopService' to use ${this._elementToScroll ? 'element' : 'window'}`, elementId || '');
        }
        this._init = true;
    }
    destroy() {
        this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
    }
    scrollABit(newY) {
        if (this._elementToScroll) {
            this._elementToScroll.scrollTop = newY;
        }
        else {
            window.scroll(0, newY);
        }
    }
    updateLastY() {
        if (!this._init)
            return;
        const newY = this.currentPositionY;
        if (newY !== this.lastY) {
            this.lastY = newY;
        }
    }
}
ScrollTopService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ScrollTopService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });
ScrollTopService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ScrollTopService, providedIn: 'root' });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ScrollTopService, decorators: [{
            type: Injectable,
            args: [{
                    providedIn: 'root'
                }]
        }], ctorParameters: function () { return []; } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc2Nyb2xsLXRvcC9zcmMvbGliL3Njcm9sbC10b3Auc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLdEQsTUFBTSxPQUFPLGdCQUFnQjtJQWlCM0I7UUFoQkEsY0FBUyxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLGFBQVEsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUM7UUFDekMsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUdOLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBUXhCLFFBQUcsR0FBRyxDQUFDLENBQU8sRUFBRSxHQUFHLFFBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFrQy9FLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNqQixNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFO29CQUNoQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7b0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO2dCQUN0QixDQUFDLENBQUMsQ0FBQTtnQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTthQUNwQjtRQUNILENBQUMsQ0FBQTtJQXhDZSxDQUFDO0lBUmpCLElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxJQUFJLElBQUksS0FBYSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRCxVQUFVLEtBQUssSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBS3ZDLElBQUksQ0FBQyxTQUFpQjtRQUNwQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUM3QixJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFnQixDQUFDO2FBQ2hGO1lBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksTUFBTSxDQUFDO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsR0FBRyxDQUFDLCtCQUErQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzFHO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN4QzthQUFNO1lBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBWU8sV0FBVztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRXhCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQTtRQUNsQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7NkdBbEVVLGdCQUFnQjtpSEFBaEIsZ0JBQWdCLGNBRmYsTUFBTTsyRkFFUCxnQkFBZ0I7a0JBSDVCLFVBQVU7bUJBQUM7b0JBQ1YsVUFBVSxFQUFFLE1BQU07aUJBQ25CIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgaXNEZXZNb2RlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnXG59KVxuZXhwb3J0IGNsYXNzIFNjcm9sbFRvcFNlcnZpY2Uge1xuICBpc0Rldk1vZGUgPSBpc0Rldk1vZGUoKTtcbiAgaXNXaW5kb3cgPSB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJztcbiAgX2luaXQgPSBmYWxzZTtcbiAgcHJpdmF0ZSBfZWxlbWVudFRvU2Nyb2xsITogSFRNTEVsZW1lbnQgfCBudWxsO1xuICBwcml2YXRlIF9ob3N0OiBhbnk7IC8vIHNjcm9sbGluZyB3aW5kb3cgYnkgZGVmYXVsdCBvciBlbGVtZW50IGlmIFtlbGVtZW50SWRdIGlzIGdpdmVuXG4gIHByaXZhdGUgbGFzdFkgPSAwO1xuICBwcml2YXRlIHRpY2tpbmcgPSBmYWxzZTtcblxuICBnZXQgY3VycmVudFBvc2l0aW9uWSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLl9lbGVtZW50VG9TY3JvbGwgPyB0aGlzLl9lbGVtZW50VG9TY3JvbGwuc2Nyb2xsVG9wIDogd2luZG93LnBhZ2VZT2Zmc2V0O1xuICB9XG4gIGdldCBpbmZvKCk6IG51bWJlciB7IHJldHVybiBNYXRoLmNlaWwodGhpcy5sYXN0WSk7IH1cblxuICBzZXREZXZNb2RlKCkgeyB0aGlzLmlzRGV2TW9kZSA9IHRydWU7IH1cbiAgbG9nID0gKHM/OiBhbnksIC4uLm9wdGlvbmFsOiBhbnlbXSkgPT4gcyAmJiB0aGlzLmlzRGV2TW9kZSAmJiBjb25zb2xlLmxvZyhzLCBvcHRpb25hbCk7XG5cbiAgY29uc3RydWN0b3IoKSB7IH1cblxuICBpbml0KGVsZW1lbnRJZDogc3RyaW5nKSB7XG4gICAgaWYgKHRoaXMuaXNXaW5kb3cpIHtcbiAgICAgIHRoaXMuZGVzdHJveSgpO1xuXG4gICAgICB0aGlzLl9lbGVtZW50VG9TY3JvbGwgPSBudWxsO1xuICAgICAgaWYgKGVsZW1lbnRJZCkge1xuICAgICAgICB0aGlzLl9lbGVtZW50VG9TY3JvbGwgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAjJHtlbGVtZW50SWR9YCkgYXMgSFRNTEVsZW1lbnQ7XG4gICAgICB9XG5cbiAgICAgIHRoaXMuX2hvc3QgPSB0aGlzLl9lbGVtZW50VG9TY3JvbGwgfHwgd2luZG93O1xuICAgICAgdGhpcy5faG9zdC5hZGRFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG5cbiAgICAgIHRoaXMubG9nKGAnTmdTY3JvbGx0b3BTZXJ2aWNlJyB0byB1c2UgJHt0aGlzLl9lbGVtZW50VG9TY3JvbGwgPyAnZWxlbWVudCcgOiAnd2luZG93J31gLCBlbGVtZW50SWQgfHwgJycpO1xuICAgIH1cblxuICAgIHRoaXMuX2luaXQgPSB0cnVlO1xuICB9XG5cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmlzV2luZG93ICYmIHRoaXMuX2hvc3QgJiYgdGhpcy5faG9zdC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVNjcm9sbCk7XG4gIH1cblxuICBzY3JvbGxBQml0KG5ld1k6IG51bWJlcikge1xuICAgIGlmICh0aGlzLl9lbGVtZW50VG9TY3JvbGwpIHtcbiAgICAgIHRoaXMuX2VsZW1lbnRUb1Njcm9sbC5zY3JvbGxUb3AgPSBuZXdZO1xuICAgIH0gZWxzZSB7XG4gICAgICB3aW5kb3cuc2Nyb2xsKDAsIG5ld1kpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlU2Nyb2xsID0gKCkgPT4ge1xuICAgIGlmICghdGhpcy50aWNraW5nKSB7XG4gICAgICB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHtcbiAgICAgICAgdGhpcy51cGRhdGVMYXN0WSgpXG4gICAgICAgIHRoaXMudGlja2luZyA9IGZhbHNlXG4gICAgICB9KVxuICAgICAgdGhpcy50aWNraW5nID0gdHJ1ZVxuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgdXBkYXRlTGFzdFkoKSB7XG4gICAgaWYgKCF0aGlzLl9pbml0KSByZXR1cm47XG5cbiAgICBjb25zdCBuZXdZID0gdGhpcy5jdXJyZW50UG9zaXRpb25ZXG4gICAgaWYgKG5ld1kgIT09IHRoaXMubGFzdFkpIHtcbiAgICAgIHRoaXMubGFzdFkgPSBuZXdZO1xuICAgIH1cbiAgfVxufVxuIl19