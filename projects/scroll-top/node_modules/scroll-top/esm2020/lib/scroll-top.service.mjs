import { Injectable, isDevMode } from '@angular/core';
import * as i0 from "@angular/core";
export class ScrollTopService {
    constructor() {
        this.isDevMode = isDevMode();
        this.isWindow = typeof window !== 'undefined';
        this._init = false;
        this.lastY = 0;
        this.ticking = false;
        this.log = (s, ...optional) => s && this.isDevMode && console.log(s, optional);
        this.handleScroll = () => {
            if (!this.ticking) {
                window.requestAnimationFrame(() => {
                    this.updateLastY();
                    this.ticking = false;
                });
                this.ticking = true;
            }
        };
    }
    get currentPositionY() {
        return this._elementToScroll ? this._elementToScroll.scrollTop : window.pageYOffset;
    }
    get info() { return Math.ceil(this.lastY); }
    setDevMode() { this.isDevMode = true; }
    init(elementId) {
        if (this.isWindow) {
            this.destroy();
            this._elementToScroll = null;
            if (elementId) {
                this._elementToScroll = document.querySelector(`#${elementId}`);
            }
            this._host = this._elementToScroll || window;
            this._host.addEventListener('scroll', this.handleScroll);
            this.log(`'NgScrolltopService' to use ${this._elementToScroll ? 'element' : 'window'}`, elementId || '');
        }
        this._init = true;
    }
    destroy() {
        this.isWindow && this._host && this._host.removeEventListener('scroll', this.handleScroll);
    }
    scrollABit(newY) {
        if (this._elementToScroll) {
            this._elementToScroll.scrollTop = newY;
        }
        else {
            window.scroll(0, newY);
        }
    }
    updateLastY() {
        if (!this._init)
            return;
        const newY = this.currentPositionY;
        if (newY !== this.lastY) {
            this.lastY = newY;
        }
    }
}
ScrollTopService.ɵfac = function ScrollTopService_Factory(t) { return new (t || ScrollTopService)(); };
ScrollTopService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: ScrollTopService, factory: ScrollTopService.ɵfac, providedIn: 'root' });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ScrollTopService, [{
        type: Injectable,
        args: [{
                providedIn: 'root'
            }]
    }], function () { return []; }, null); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvcC5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vcHJvamVjdHMvc2Nyb2xsLXRvcC9zcmMvbGliL3Njcm9sbC10b3Auc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLFNBQVMsRUFBRSxNQUFNLGVBQWUsQ0FBQzs7QUFLdEQsTUFBTSxPQUFPLGdCQUFnQjtJQWlCM0I7UUFoQkEsY0FBUyxHQUFHLFNBQVMsRUFBRSxDQUFDO1FBQ3hCLGFBQVEsR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUM7UUFDekMsVUFBSyxHQUFHLEtBQUssQ0FBQztRQUdOLFVBQUssR0FBRyxDQUFDLENBQUM7UUFDVixZQUFPLEdBQUcsS0FBSyxDQUFDO1FBUXhCLFFBQUcsR0FBRyxDQUFDLENBQU8sRUFBRSxHQUFHLFFBQWUsRUFBRSxFQUFFLENBQUMsQ0FBQyxJQUFJLElBQUksQ0FBQyxTQUFTLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUUsUUFBUSxDQUFDLENBQUM7UUFrQy9FLGlCQUFZLEdBQUcsR0FBRyxFQUFFO1lBQzFCLElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO2dCQUNqQixNQUFNLENBQUMscUJBQXFCLENBQUMsR0FBRyxFQUFFO29CQUNoQyxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUE7b0JBQ2xCLElBQUksQ0FBQyxPQUFPLEdBQUcsS0FBSyxDQUFBO2dCQUN0QixDQUFDLENBQUMsQ0FBQTtnQkFDRixJQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQTthQUNwQjtRQUNILENBQUMsQ0FBQTtJQXhDZSxDQUFDO0lBUmpCLElBQUksZ0JBQWdCO1FBQ2xCLE9BQU8sSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsV0FBVyxDQUFDO0lBQ3RGLENBQUM7SUFDRCxJQUFJLElBQUksS0FBYSxPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQztJQUVwRCxVQUFVLEtBQUssSUFBSSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO0lBS3ZDLElBQUksQ0FBQyxTQUFpQjtRQUNwQixJQUFJLElBQUksQ0FBQyxRQUFRLEVBQUU7WUFDakIsSUFBSSxDQUFDLE9BQU8sRUFBRSxDQUFDO1lBRWYsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksQ0FBQztZQUM3QixJQUFJLFNBQVMsRUFBRTtnQkFDYixJQUFJLENBQUMsZ0JBQWdCLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxJQUFJLFNBQVMsRUFBRSxDQUFnQixDQUFDO2FBQ2hGO1lBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUMsZ0JBQWdCLElBQUksTUFBTSxDQUFDO1lBQzdDLElBQUksQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQztZQUV6RCxJQUFJLENBQUMsR0FBRyxDQUFDLCtCQUErQixJQUFJLENBQUMsZ0JBQWdCLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsUUFBUSxFQUFFLEVBQUUsU0FBUyxJQUFJLEVBQUUsQ0FBQyxDQUFDO1NBQzFHO1FBRUQsSUFBSSxDQUFDLEtBQUssR0FBRyxJQUFJLENBQUM7SUFDcEIsQ0FBQztJQUVELE9BQU87UUFDTCxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxLQUFLLElBQUksSUFBSSxDQUFDLEtBQUssQ0FBQyxtQkFBbUIsQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxDQUFDO0lBQzdGLENBQUM7SUFFRCxVQUFVLENBQUMsSUFBWTtRQUNyQixJQUFJLElBQUksQ0FBQyxnQkFBZ0IsRUFBRTtZQUN6QixJQUFJLENBQUMsZ0JBQWdCLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztTQUN4QzthQUFNO1lBQ0wsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLEVBQUUsSUFBSSxDQUFDLENBQUM7U0FDeEI7SUFDSCxDQUFDO0lBWU8sV0FBVztRQUNqQixJQUFJLENBQUMsSUFBSSxDQUFDLEtBQUs7WUFBRSxPQUFPO1FBRXhCLE1BQU0sSUFBSSxHQUFHLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQTtRQUNsQyxJQUFJLElBQUksS0FBSyxJQUFJLENBQUMsS0FBSyxFQUFFO1lBQ3ZCLElBQUksQ0FBQyxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ25CO0lBQ0gsQ0FBQzs7Z0ZBbEVVLGdCQUFnQjtzRUFBaEIsZ0JBQWdCLFdBQWhCLGdCQUFnQixtQkFGZixNQUFNO3VGQUVQLGdCQUFnQjtjQUg1QixVQUFVO2VBQUM7Z0JBQ1YsVUFBVSxFQUFFLE1BQU07YUFDbkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBpc0Rldk1vZGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoe1xuICBwcm92aWRlZEluOiAncm9vdCdcbn0pXG5leHBvcnQgY2xhc3MgU2Nyb2xsVG9wU2VydmljZSB7XG4gIGlzRGV2TW9kZSA9IGlzRGV2TW9kZSgpO1xuICBpc1dpbmRvdyA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnO1xuICBfaW5pdCA9IGZhbHNlO1xuICBwcml2YXRlIF9lbGVtZW50VG9TY3JvbGwhOiBIVE1MRWxlbWVudCB8IG51bGw7XG4gIHByaXZhdGUgX2hvc3Q6IGFueTsgLy8gc2Nyb2xsaW5nIHdpbmRvdyBieSBkZWZhdWx0IG9yIGVsZW1lbnQgaWYgW2VsZW1lbnRJZF0gaXMgZ2l2ZW5cbiAgcHJpdmF0ZSBsYXN0WSA9IDA7XG4gIHByaXZhdGUgdGlja2luZyA9IGZhbHNlO1xuXG4gIGdldCBjdXJyZW50UG9zaXRpb25ZKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuX2VsZW1lbnRUb1Njcm9sbCA/IHRoaXMuX2VsZW1lbnRUb1Njcm9sbC5zY3JvbGxUb3AgOiB3aW5kb3cucGFnZVlPZmZzZXQ7XG4gIH1cbiAgZ2V0IGluZm8oKTogbnVtYmVyIHsgcmV0dXJuIE1hdGguY2VpbCh0aGlzLmxhc3RZKTsgfVxuXG4gIHNldERldk1vZGUoKSB7IHRoaXMuaXNEZXZNb2RlID0gdHJ1ZTsgfVxuICBsb2cgPSAocz86IGFueSwgLi4ub3B0aW9uYWw6IGFueVtdKSA9PiBzICYmIHRoaXMuaXNEZXZNb2RlICYmIGNvbnNvbGUubG9nKHMsIG9wdGlvbmFsKTtcblxuICBjb25zdHJ1Y3RvcigpIHsgfVxuXG4gIGluaXQoZWxlbWVudElkOiBzdHJpbmcpIHtcbiAgICBpZiAodGhpcy5pc1dpbmRvdykge1xuICAgICAgdGhpcy5kZXN0cm95KCk7XG5cbiAgICAgIHRoaXMuX2VsZW1lbnRUb1Njcm9sbCA9IG51bGw7XG4gICAgICBpZiAoZWxlbWVudElkKSB7XG4gICAgICAgIHRoaXMuX2VsZW1lbnRUb1Njcm9sbCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoYCMke2VsZW1lbnRJZH1gKSBhcyBIVE1MRWxlbWVudDtcbiAgICAgIH1cblxuICAgICAgdGhpcy5faG9zdCA9IHRoaXMuX2VsZW1lbnRUb1Njcm9sbCB8fCB3aW5kb3c7XG4gICAgICB0aGlzLl9ob3N0LmFkZEV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcblxuICAgICAgdGhpcy5sb2coYCdOZ1Njcm9sbHRvcFNlcnZpY2UnIHRvIHVzZSAke3RoaXMuX2VsZW1lbnRUb1Njcm9sbCA/ICdlbGVtZW50JyA6ICd3aW5kb3cnfWAsIGVsZW1lbnRJZCB8fCAnJyk7XG4gICAgfVxuXG4gICAgdGhpcy5faW5pdCA9IHRydWU7XG4gIH1cblxuICBkZXN0cm95KCkge1xuICAgIHRoaXMuaXNXaW5kb3cgJiYgdGhpcy5faG9zdCAmJiB0aGlzLl9ob3N0LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsIHRoaXMuaGFuZGxlU2Nyb2xsKTtcbiAgfVxuXG4gIHNjcm9sbEFCaXQobmV3WTogbnVtYmVyKSB7XG4gICAgaWYgKHRoaXMuX2VsZW1lbnRUb1Njcm9sbCkge1xuICAgICAgdGhpcy5fZWxlbWVudFRvU2Nyb2xsLnNjcm9sbFRvcCA9IG5ld1k7XG4gICAgfSBlbHNlIHtcbiAgICAgIHdpbmRvdy5zY3JvbGwoMCwgbmV3WSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBoYW5kbGVTY3JvbGwgPSAoKSA9PiB7XG4gICAgaWYgKCF0aGlzLnRpY2tpbmcpIHtcbiAgICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xuICAgICAgICB0aGlzLnVwZGF0ZUxhc3RZKClcbiAgICAgICAgdGhpcy50aWNraW5nID0gZmFsc2VcbiAgICAgIH0pXG4gICAgICB0aGlzLnRpY2tpbmcgPSB0cnVlXG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSB1cGRhdGVMYXN0WSgpIHtcbiAgICBpZiAoIXRoaXMuX2luaXQpIHJldHVybjtcblxuICAgIGNvbnN0IG5ld1kgPSB0aGlzLmN1cnJlbnRQb3NpdGlvbllcbiAgICBpZiAobmV3WSAhPT0gdGhpcy5sYXN0WSkge1xuICAgICAgdGhpcy5sYXN0WSA9IG5ld1k7XG4gICAgfVxuICB9XG59XG4iXX0=