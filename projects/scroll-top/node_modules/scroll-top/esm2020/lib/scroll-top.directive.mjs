import { Directive, HostListener } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./scroll-top.service";
const DURATION = 1000;
export class ScrollTopDirective {
    constructor(service, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        this.progress = 0;
        this.easing = (x) => {
            'use strict';
            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        };
        this.scrollABit = this.scrollABit.bind(this);
    }
    onclick() {
        this.startTop = this.service.currentPositionY;
        this.startTime = null;
        this.ngZone.runOutsideAngular(() => { window.requestAnimationFrame(this.scrollABit); });
        this.service.log('NgScrolltopDirective click');
    }
    scrollABit(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        this.progress = timestamp - this.startTime;
        const percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
        const newY = this.startTop - Math.ceil(this.startTop * percent);
        this.service.scrollABit(newY);
        if (percent < 1) {
            this.ngZone.runOutsideAngular(() => { window.requestAnimationFrame(this.scrollABit); });
        }
    }
}
ScrollTopDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ScrollTopDirective, deps: [{ token: i1.ScrollTopService }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });
ScrollTopDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: "14.0.0", version: "14.2.0", type: ScrollTopDirective, selector: "[blScrolltop]", host: { listeners: { "click": "onclick()" } }, ngImport: i0 });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "14.2.0", ngImport: i0, type: ScrollTopDirective, decorators: [{
            type: Directive,
            args: [{
                    selector: '[blScrolltop]'
                }]
        }], ctorParameters: function () { return [{ type: i1.ScrollTopService }, { type: i0.NgZone }]; }, propDecorators: { onclick: [{
                type: HostListener,
                args: ['click']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zY3JvbGwtdG9wL3NyYy9saWIvc2Nyb2xsLXRvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQVUsTUFBTSxlQUFlLENBQUM7OztBQUdoRSxNQUFNLFFBQVEsR0FBRyxJQUFJLENBQUM7QUFLdEIsTUFBTSxPQUFPLGtCQUFrQjtJQUs3QixZQUFtQixPQUF5QixFQUNsQyxNQUFjO1FBREwsWUFBTyxHQUFQLE9BQU8sQ0FBa0I7UUFDbEMsV0FBTSxHQUFOLE1BQU0sQ0FBUTtRQUh4QixhQUFRLEdBQVcsQ0FBQyxDQUFDO1FBZ0JyQixXQUFNLEdBQUcsQ0FBQyxDQUFTLEVBQUUsRUFBRTtZQUNyQixZQUFZLENBQUM7WUFFYixJQUFJLENBQUMsR0FBRyxHQUFHLEVBQUU7Z0JBQ1gsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO2FBQy9CO1lBQ0QsT0FBTyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFDLENBQUMsQ0FBQTtRQW5CQyxJQUFJLENBQUMsVUFBVSxHQUFHLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQy9DLENBQUM7SUFHRCxPQUFPO1FBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBQ3RCLElBQUksQ0FBQyxNQUFNLENBQUMsaUJBQWlCLENBQUMsR0FBRyxFQUFFLEdBQUcsTUFBTSxDQUFDLHFCQUFxQixDQUFDLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXhGLElBQUksQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLDRCQUE0QixDQUFDLENBQUM7SUFDakQsQ0FBQztJQVdELFVBQVUsQ0FBQyxTQUFpQjtRQUMxQixJQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsRUFBRTtZQUNuQixJQUFJLENBQUMsU0FBUyxHQUFHLFNBQVMsQ0FBQztTQUM1QjtRQUVELElBQUksQ0FBQyxRQUFRLEdBQUcsU0FBUyxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUM7UUFDM0MsTUFBTSxPQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsUUFBUSxJQUFJLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDLENBQUMsQ0FBQztRQUN4RixNQUFNLElBQUksR0FBRyxJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLFFBQVEsR0FBRyxPQUFPLENBQUMsQ0FBQztRQUVoRSxJQUFJLENBQUMsT0FBTyxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUU5QixJQUFJLE9BQU8sR0FBRyxDQUFDLEVBQUU7WUFDZixJQUFJLENBQUMsTUFBTSxDQUFDLGlCQUFpQixDQUFDLEdBQUcsRUFBRSxHQUFHLE1BQU0sQ0FBQyxxQkFBcUIsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQztTQUN6RjtJQUNILENBQUM7OytHQTFDVSxrQkFBa0I7bUdBQWxCLGtCQUFrQjsyRkFBbEIsa0JBQWtCO2tCQUg5QixTQUFTO21CQUFDO29CQUNULFFBQVEsRUFBRSxlQUFlO2lCQUMxQjs0SEFZQyxPQUFPO3NCQUROLFlBQVk7dUJBQUMsT0FBTyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgU2Nyb2xsVG9wU2VydmljZSB9IGZyb20gJy4vc2Nyb2xsLXRvcC5zZXJ2aWNlJztcclxuXHJcbmNvbnN0IERVUkFUSU9OID0gMTAwMDtcclxuXHJcbkBEaXJlY3RpdmUoe1xyXG4gIHNlbGVjdG9yOiAnW2JsU2Nyb2xsdG9wXSdcclxufSlcclxuZXhwb3J0IGNsYXNzIFNjcm9sbFRvcERpcmVjdGl2ZSB7XHJcbiAgc3RhcnRUaW1lITogbnVtYmVyIHwgbnVsbDtcclxuICBzdGFydFRvcCE6IG51bWJlcjtcclxuICBwcm9ncmVzczogbnVtYmVyID0gMDtcclxuXHJcbiAgY29uc3RydWN0b3IocHVibGljIHNlcnZpY2U6IFNjcm9sbFRvcFNlcnZpY2UsXHJcbiAgICBwcml2YXRlIG5nWm9uZTogTmdab25lKSB7XHJcbiAgICB0aGlzLnNjcm9sbEFCaXQgPSB0aGlzLnNjcm9sbEFCaXQuYmluZCh0aGlzKTtcclxuICB9XHJcblxyXG4gIEBIb3N0TGlzdGVuZXIoJ2NsaWNrJylcclxuICBvbmNsaWNrKCkge1xyXG4gICAgdGhpcy5zdGFydFRvcCA9IHRoaXMuc2VydmljZS5jdXJyZW50UG9zaXRpb25ZO1xyXG4gICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xyXG4gICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4geyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsQUJpdCk7IH0pO1xyXG5cclxuICAgIHRoaXMuc2VydmljZS5sb2coJ05nU2Nyb2xsdG9wRGlyZWN0aXZlIGNsaWNrJyk7XHJcbiAgfVxyXG5cclxuICBlYXNpbmcgPSAoeDogbnVtYmVyKSA9PiB7XHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgaWYgKHggPCAwLjUpIHtcclxuICAgICAgcmV0dXJuIE1hdGgucG93KHggKiAyLCAyKSAvIDI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMSAtIE1hdGgucG93KCgxIC0geCkgKiAyLCAyKSAvIDI7XHJcbiAgfVxyXG5cclxuICBzY3JvbGxBQml0KHRpbWVzdGFtcDogbnVtYmVyKSB7XHJcbiAgICBpZiAoIXRoaXMuc3RhcnRUaW1lKSB7XHJcbiAgICAgIHRoaXMuc3RhcnRUaW1lID0gdGltZXN0YW1wO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aW1lc3RhbXAgLSB0aGlzLnN0YXJ0VGltZTtcclxuICAgIGNvbnN0IHBlcmNlbnQgPSAodGhpcy5wcm9ncmVzcyA+PSBEVVJBVElPTiA/IDEgOiB0aGlzLmVhc2luZyh0aGlzLnByb2dyZXNzIC8gRFVSQVRJT04pKTtcclxuICAgIGNvbnN0IG5ld1kgPSB0aGlzLnN0YXJ0VG9wIC0gTWF0aC5jZWlsKHRoaXMuc3RhcnRUb3AgKiBwZXJjZW50KTtcclxuXHJcbiAgICB0aGlzLnNlcnZpY2Uuc2Nyb2xsQUJpdChuZXdZKTtcclxuXHJcbiAgICBpZiAocGVyY2VudCA8IDEpIHtcclxuICAgICAgdGhpcy5uZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXIoKCkgPT4geyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lKHRoaXMuc2Nyb2xsQUJpdCk7IH0pO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iXX0=