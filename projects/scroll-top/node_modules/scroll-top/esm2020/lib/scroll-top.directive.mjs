import { Directive, HostListener, Input } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "./scroll-top.service";
const DURATION = 1000;
export class ScrollTopDirective {
    constructor(service, ngZone) {
        this.service = service;
        this.ngZone = ngZone;
        this.progress = 0;
        this.easing = (x) => {
            'use strict';
            if (x < 0.5) {
                return Math.pow(x * 2, 2) / 2;
            }
            return 1 - Math.pow((1 - x) * 2, 2) / 2;
        };
        this.scrollABit = this.scrollABit.bind(this);
    }
    onclick($event) {
        this.startTop = this.service.currentPositionY;
        this.startTime = null;
        if (this.targetElementExists($event, this.targetElement)) {
            this.ngZone.runOutsideAngular(() => { window.requestAnimationFrame(this.scrollABit); });
        }
        this.service.log('NgScrolltopDirective click');
    }
    targetElementExists($event, selector) {
        let found = false;
        if ($event?.target.matches(`#${selector}, #${selector} > *`)) {
            found = true;
        }
        return found;
    }
    scrollABit(timestamp) {
        if (!this.startTime) {
            this.startTime = timestamp;
        }
        this.progress = timestamp - this.startTime;
        const percent = (this.progress >= DURATION ? 1 : this.easing(this.progress / DURATION));
        const newY = this.startTop - Math.ceil(this.startTop * percent);
        this.service.scrollABit(newY);
        if (percent < 1) {
            this.ngZone.runOutsideAngular(() => { window.requestAnimationFrame(this.scrollABit); });
        }
    }
}
ScrollTopDirective.ɵfac = function ScrollTopDirective_Factory(t) { return new (t || ScrollTopDirective)(i0.ɵɵdirectiveInject(i1.ScrollTopService), i0.ɵɵdirectiveInject(i0.NgZone)); };
ScrollTopDirective.ɵdir = /*@__PURE__*/ i0.ɵɵdefineDirective({ type: ScrollTopDirective, selectors: [["", "blScrolltop", ""]], hostBindings: function ScrollTopDirective_HostBindings(rf, ctx) { if (rf & 1) {
        i0.ɵɵlistener("click", function ScrollTopDirective_click_HostBindingHandler($event) { return ctx.onclick($event); });
    } }, inputs: { targetElement: "targetElement" } });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && i0.ɵsetClassMetadata(ScrollTopDirective, [{
        type: Directive,
        args: [{
                selector: '[blScrolltop]'
            }]
    }], function () { return [{ type: i1.ScrollTopService }, { type: i0.NgZone }]; }, { targetElement: [{
            type: Input,
            args: ['targetElement']
        }], onclick: [{
            type: HostListener,
            args: ['click', ['$event']]
        }] }); })();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Nyb2xsLXRvcC5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi9wcm9qZWN0cy9zY3JvbGwtdG9wL3NyYy9saWIvc2Nyb2xsLXRvcC5kaXJlY3RpdmUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxZQUFZLEVBQUUsS0FBSyxFQUFVLE1BQU0sZUFBZSxDQUFDOzs7QUFHdkUsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDO0FBS3RCLE1BQU0sT0FBTyxrQkFBa0I7SUFLN0IsWUFBbUIsT0FBeUIsRUFDbEMsTUFBYztRQURMLFlBQU8sR0FBUCxPQUFPLENBQWtCO1FBQ2xDLFdBQU0sR0FBTixNQUFNLENBQVE7UUFIeEIsYUFBUSxHQUFXLENBQUMsQ0FBQztRQThCckIsV0FBTSxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7WUFDckIsWUFBWSxDQUFDO1lBRWIsSUFBSSxDQUFDLEdBQUcsR0FBRyxFQUFFO2dCQUNYLE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUMvQjtZQUNELE9BQU8sQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztRQUMxQyxDQUFDLENBQUE7UUFqQ0MsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUMvQyxDQUFDO0lBS0QsT0FBTyxDQUFDLE1BQVc7UUFDakIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLGdCQUFnQixDQUFDO1FBQzlDLElBQUksQ0FBQyxTQUFTLEdBQUcsSUFBSSxDQUFDO1FBRXRCLElBQUksSUFBSSxDQUFDLG1CQUFtQixDQUFDLE1BQU0sRUFBRSxJQUFJLENBQUMsYUFBYSxDQUFDLEVBQUU7WUFDeEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekY7UUFFRCxJQUFJLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyw0QkFBNEIsQ0FBQyxDQUFDO0lBQ2pELENBQUM7SUFFTyxtQkFBbUIsQ0FBQyxNQUFXLEVBQUUsUUFBZ0I7UUFDdkQsSUFBSSxLQUFLLEdBQUcsS0FBSyxDQUFDO1FBRWxCLElBQUksTUFBTSxFQUFFLE1BQU0sQ0FBQyxPQUFPLENBQUMsSUFBSSxRQUFRLE1BQU0sUUFBUSxNQUFNLENBQUMsRUFBRTtZQUM1RCxLQUFLLEdBQUcsSUFBSSxDQUFDO1NBQ2Q7UUFDRCxPQUFPLEtBQUssQ0FBQztJQUNmLENBQUM7SUFXRCxVQUFVLENBQUMsU0FBaUI7UUFDMUIsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLEVBQUU7WUFDbkIsSUFBSSxDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7U0FDNUI7UUFFRCxJQUFJLENBQUMsUUFBUSxHQUFHLFNBQVMsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDO1FBQzNDLE1BQU0sT0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLFFBQVEsSUFBSSxRQUFRLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxHQUFHLFFBQVEsQ0FBQyxDQUFDLENBQUM7UUFDeEYsTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLENBQUM7UUFFaEUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLENBQUM7UUFFOUIsSUFBSSxPQUFPLEdBQUcsQ0FBQyxFQUFFO1lBQ2YsSUFBSSxDQUFDLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxHQUFHLEVBQUUsR0FBRyxNQUFNLENBQUMscUJBQXFCLENBQUMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7U0FDekY7SUFDSCxDQUFDOztvRkF4RFUsa0JBQWtCO3FFQUFsQixrQkFBa0I7cUdBQWxCLG1CQUFlOzt1RkFBZixrQkFBa0I7Y0FIOUIsU0FBUztlQUFDO2dCQUNULFFBQVEsRUFBRSxlQUFlO2FBQzFCO3dGQVd5QixhQUFhO2tCQUFwQyxLQUFLO21CQUFDLGVBQWU7WUFHdEIsT0FBTztrQkFETixZQUFZO21CQUFDLE9BQU8sRUFBRSxDQUFDLFFBQVEsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgSG9zdExpc3RlbmVyLCBJbnB1dCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7IFNjcm9sbFRvcFNlcnZpY2UgfSBmcm9tICcuL3Njcm9sbC10b3Auc2VydmljZSc7XHJcblxyXG5jb25zdCBEVVJBVElPTiA9IDEwMDA7XHJcblxyXG5ARGlyZWN0aXZlKHtcclxuICBzZWxlY3RvcjogJ1tibFNjcm9sbHRvcF0nXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTY3JvbGxUb3BEaXJlY3RpdmUge1xyXG4gIHN0YXJ0VGltZSE6IG51bWJlciB8IG51bGw7XHJcbiAgc3RhcnRUb3AhOiBudW1iZXI7XHJcbiAgcHJvZ3Jlc3M6IG51bWJlciA9IDA7XHJcblxyXG4gIGNvbnN0cnVjdG9yKHB1YmxpYyBzZXJ2aWNlOiBTY3JvbGxUb3BTZXJ2aWNlLFxyXG4gICAgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge1xyXG4gICAgdGhpcy5zY3JvbGxBQml0ID0gdGhpcy5zY3JvbGxBQml0LmJpbmQodGhpcyk7XHJcbiAgfVxyXG5cclxuICBASW5wdXQoJ3RhcmdldEVsZW1lbnQnKSB0YXJnZXRFbGVtZW50ITogc3RyaW5nO1xyXG5cclxuICBASG9zdExpc3RlbmVyKCdjbGljaycsIFsnJGV2ZW50J10pXHJcbiAgb25jbGljaygkZXZlbnQ6IGFueSkge1xyXG4gICAgdGhpcy5zdGFydFRvcCA9IHRoaXMuc2VydmljZS5jdXJyZW50UG9zaXRpb25ZO1xyXG4gICAgdGhpcy5zdGFydFRpbWUgPSBudWxsO1xyXG5cclxuICAgIGlmICh0aGlzLnRhcmdldEVsZW1lbnRFeGlzdHMoJGV2ZW50LCB0aGlzLnRhcmdldEVsZW1lbnQpKSB7XHJcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnNjcm9sbEFCaXQpOyB9KTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNlcnZpY2UubG9nKCdOZ1Njcm9sbHRvcERpcmVjdGl2ZSBjbGljaycpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB0YXJnZXRFbGVtZW50RXhpc3RzKCRldmVudDogYW55LCBzZWxlY3Rvcjogc3RyaW5nKTogYm9vbGVhbiB7XHJcbiAgICBsZXQgZm91bmQgPSBmYWxzZTtcclxuXHJcbiAgICBpZiAoJGV2ZW50Py50YXJnZXQubWF0Y2hlcyhgIyR7c2VsZWN0b3J9LCAjJHtzZWxlY3Rvcn0gPiAqYCkpIHtcclxuICAgICAgZm91bmQgPSB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZvdW5kO1xyXG4gIH1cclxuXHJcbiAgZWFzaW5nID0gKHg6IG51bWJlcikgPT4ge1xyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIGlmICh4IDwgMC41KSB7XHJcbiAgICAgIHJldHVybiBNYXRoLnBvdyh4ICogMiwgMikgLyAyO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIDEgLSBNYXRoLnBvdygoMSAtIHgpICogMiwgMikgLyAyO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsQUJpdCh0aW1lc3RhbXA6IG51bWJlcikge1xyXG4gICAgaWYgKCF0aGlzLnN0YXJ0VGltZSkge1xyXG4gICAgICB0aGlzLnN0YXJ0VGltZSA9IHRpbWVzdGFtcDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnByb2dyZXNzID0gdGltZXN0YW1wIC0gdGhpcy5zdGFydFRpbWU7XHJcbiAgICBjb25zdCBwZXJjZW50ID0gKHRoaXMucHJvZ3Jlc3MgPj0gRFVSQVRJT04gPyAxIDogdGhpcy5lYXNpbmcodGhpcy5wcm9ncmVzcyAvIERVUkFUSU9OKSk7XHJcbiAgICBjb25zdCBuZXdZID0gdGhpcy5zdGFydFRvcCAtIE1hdGguY2VpbCh0aGlzLnN0YXJ0VG9wICogcGVyY2VudCk7XHJcblxyXG4gICAgdGhpcy5zZXJ2aWNlLnNjcm9sbEFCaXQobmV3WSk7XHJcblxyXG4gICAgaWYgKHBlcmNlbnQgPCAxKSB7XHJcbiAgICAgIHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IHsgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSh0aGlzLnNjcm9sbEFCaXQpOyB9KTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuIl19